version: 2.1

jobs:
  build:
    docker:
      - image: node:11.10.1

    working_directory: ~/repo
    steps:
      - checkout

        #      - restore_cache:
        #  keys:
        #      - v1-dependencies-{{checksum "companion-app/package.json"}}
        #      - v1-dependencies-


        #- run: yarn --cwd companion-app/ install

        #- save_cache:
        #  paths:
        #      - companion-app/node_modules
        #  key: v1-dependencies-{{checksum "companion-app/package.json"}}

      # run tests!
      #- run: yarn --cwd companion-app/ test

        #- run: yarn --cwd companion-app/ build

      - run:
          name: Installing SUDO
          command: 'apt-get update && apt-get install -y sudo && rm -rf /var/lib/apt/lists/*'
      - run:
          name: Installing GCC
          command: 'apt-get update && apt-get install -y gcc g++'
      - run:
         name: Install CMAKE
         command: 'apt-get update && sudo apt-get install -y cmake'
      - run:
         name: Installing LCOV
         command: 'apt install lcov -y'
      - run:
          name: Installing Python3.5
          command: 'apt-get install python3-dev -y'
      - run:
          name: Installing pip3
          command: 'apt-get install python3-pip -y'
      - run:
          name: Installing boto3
          command: 'pip3 install boto3'
      - run:
          name: Installing pytest
          command: 'pip3 install pytest'
      - run:
          name: Installing coverage for Python
          command: 'pip3 install coverage'
      - run:
          name: Creating Binary Files
          command: 'cd AudioEngine/ && make coverage CPU=X86 CONFIG=Release && make build CPU=X86 CONFIG=Release'
      - run:
          name: Point Unit Testing
          command: 'cd AudioEngine/ && ./audio_test && ./parse_test'
      - run:
          name: Generate C++ coverage html report
          command: 'cd AudioEngine/ && gcov -r audioEngine.cpp && lcov --no-external --capture --directory . --output-file AudioEngine.info && genhtml AudioEngine.info --output-directory html'
          #- run:
          #name: Run server.py unit tests
          #command: 'cd pyServer/ && pytest'
      - run:
          name:  Begin Python coverage report
          command: 'cd pyServer/ && coverage run -m pytest'
      - run:
          name: Generate Python coverage html report
          command: 'cd pyServer/ && coverage html'


      - store_artifacts:
          path: AudioEngine/html

      - store_artifacts:
          path: pyServer/coverage_html_report

